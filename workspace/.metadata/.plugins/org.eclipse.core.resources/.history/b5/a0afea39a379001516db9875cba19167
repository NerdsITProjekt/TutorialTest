package Server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class ClientConnection extends Thread {
	private EventHandler controller;
	private Socket socket;
	private String name;
	private String a;

	public ClientConnection(EventHandler controller, Socket socket) {
		this.controller = controller;
		this.socket = socket;
		this.name = socket.getInetAddress().toString(); // default
	}

	@Override
	public boolean equals(Object c) {
		boolean isEqual = false;
		if (c instanceof ClientConnection) {
			isEqual = ((ClientConnection) c).name.equals(name);
		}
		return isEqual;
	}

	@Override
	public String toString() {
		return name + " (" + socket.getInetAddress().toString() + ") \n";
	}
	
	public void receiveMessage(Socket socket){
		try {
			ObjectInputStream clientInputStream = new 
			        ObjectInputStream(socket.getInputStream());
			try {
				a = (String)clientInputStream.readObject();
				a= a + "FCUKER";
				
				ObjectOutputStream clientOutputStream = new
			            ObjectOutputStream(socket.getOutputStream());
				clientOutputStream.writeObject(a);

			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void close() {
		try {
		socket.close();
		} catch (IOException e) {
		// We are closing - do nothing
		}
		}
	
	public void run() {
		try {
			ObjectInputStream clientInputStream = new 
			        ObjectInputStream(socket.getInputStream());
			
				a = (String)clientInputStream.readObject();
				a= a + "FCUKER";
			
			// Answer messages forever
		Message.MessageType lastMessageType = null;
		while (true) {
		// Read a message from the client
		Message msgIn = Message.receive (socket);
		lastMessageType = msgIn.getType();
		// Process message
		Message msgOut = null;
		switch (lastMessageType) {
		case Register :
		msgOut = new Message(Message.MessageType.Confirm );
		name = msgIn.getName(); // Set client's name
		msgOut.setName(name);
		msgOut.send(socket);
		break;
		case Chat :
		controller.broadcast(msgIn);
		break;
		}
		}
		} catch (Exception e) {
		// TODO Add error handling
		}
		}
		
	
}
